// Taco Hotel app - by Martin Savage

void displaySlider(int x, int y, int width, int height) {
/$ctx.fillStyle = toColor(getAttribute(12));
  ctx.globalAlpha = getAttribute(13);
  const radius = 15;
  const radiusy = Math.min(radius, height / 2);

  ctx.beginPath();
  ctx.moveTo(x - radius, y);
  ctx.quadraticCurveTo(x, y, x, y + radiusy);
  if (height > 2 * radius)
    ctx.lineTo(x, y + height - radiusy)
  ctx.quadraticCurveTo(x, y + height, x + radius, y + height);
  ctx.lineTo(x + width - radius, y + height)
  ctx.quadraticCurveTo(x + width, y + height, x + width, y + height - radiusy);
  if (height > 2 * radius)
    ctx.lineTo(x + width, y + radiusy);
  ctx.quadraticCurveTo(x + width, y, x + width + radius, y);
  ctx.lineTo(x - radius, y)
  ctx.fill()$/
}

void displayTacos(int x, int y, int width, int height, int count) {
/$const scale = height / 80;
  const pos = (width - height * 1.25) / 2;

  // Scaled rectangle
  ctx.translate(x + pos, y);
  ctx.scale(scale, scale);

  function renderTaco(y) {
    ctx.save();
    ctx.fillStyle = toColor(getAttribute(12));
    ctx.globalAlpha = getAttribute(13);
    ctx.beginPath();
    ctx.arc(50, 50 + y, 50, 190/360 * 2 * Math.PI, -10/360 * 2 * Math.PI);
    ctx.fill();

    if (y < 60) {
      ctx.fillStyle = toColor(attributeStacks[12][attributeStacks[12].length - 2]);
//      ctx.globalAlpha = getAttribute(attributeStacks[13][attributeStacks[13].length - 2]);
      ctx.beginPath();
      ctx.arc(50, 70 + y, 53, 190/360 * 2 * Math.PI, -10/360 * 2 * Math.PI);
      ctx.fill();
    }

    ctx.restore();
  }

  for (let i = 4 - count; i < 4; i++)
    renderTaco(i * 20)

  ctx.setTransform(1, 0, 0, 1, 0, 0)$/
}

void showTwoTacos(int x, int y, int width, int height) {displayTacos(x, y, width, height, 2);}

// Generic widgets

void ObjectOverTextButton(drawFn drawObject, String text) {
  var button = new RectButton((void L_() {
    <| align: 50%
      <out: drawObject; size: [240, 160]; align: 50%; color: COLOR_WHITE; pos: [0, -40];>
      <size: 10;>
      <size: [300, 50]
        <out: text; align: 50%; color: COLOR_WHITE;>
      >
    >
  })) -> return
  <out: button;>
}

void ObjectBeforeTextButton(drawFn drawObject, String text) {
  var button = new RectButton((void L_() {
    <_ align: [0, 50%]; color: COLOR_WHITE
      <size: 30;>
      <out: drawObject; size: 60; align: 50%;>
      <size: 20;>
      <size: [200, 50]
        <out: text; align: [0, 50%];>
      >
    >
  })) -> return
  <out: button;>
}

String KeyButton(String text) {
  var button = new TextButton(text) -> return text

  <size: getAttribute(5) as int * 1.5 as int;>
  <out: button; fontSize: (getAttribute(5) as int * (/$text.length$/ as int > 1 ? 0.5 : 1)) as int;>
}

String LargerButton(String text) {
  var button = new TextButton("   " + text + "   ") -> return text

  <size: [0, getAttribute(5) as int * 2.5 as int]; expand: 100%;>
  <out: button;>
}

String NumericKeyboardWidget() {
  String typedText = ""
  String[] numKeyboardRows = ["789", "456", "123"];
  String Row(int row) {
    var buttons = index:_ /$NumericKeyboardWidget$this.numKeyboardRows[Row$this.row].length$/ new
      KeyButton(/$NumericKeyboardWidget$this.numKeyboardRows[Row$this.row].charAt(index)$/ as String) -> return /$_ret._ret$/

    <out: buttons; align: 50%;>
  }
  var rows = i::numKeyboardRows.size() new Row(i) ->  {typedText += /$_ret._ret$/; return typedText}
  var lastRow = [
    new KeyButton("Clear") -> {typedText = ""; return typedText},
    new KeyButton("0") -> {typedText += "0"; return typedText},
    new KeyButton("Del") -> {typedText = /$NumericKeyboardWidget$this.typedText.slice(0, -1)$/; return typedText}
  ]

  <|
    <out: rows[0];>
    <size: 15;>
    <out: rows[1];>
    <size: 15;>
    <out: rows[2];>
    <size: 15;>
    <out: lastRow; align: 50%;>
  >
}

String AlphaKeyboardWidget() {
  String typedText = ""
  String[] alphaKeyboardRows = ["1234567890", "QWERTYUIOP", "ASDFGHJKL", "ZXCVBNM"];
  String Row(int row) {
    var buttons = index:_ /$AlphaKeyboardWidget$this.alphaKeyboardRows[Row$this.row].length$/ new
      KeyButton(/$AlphaKeyboardWidget$this.alphaKeyboardRows[Row$this.row].charAt(index)$/ as String) -> return /$_ret._ret$/

    <out: buttons; align: 50%;>
  }
  var rows = i::alphaKeyboardRows.size() new Row(i) ->  {typedText += /$_ret._ret$/; return typedText}
  void SpaceFunc() {<size: [200, 1];>}
  var lastRow = [
    new KeyButton("Clear") -> {typedText = ""; return typedText},
    new RectButton(SpaceFunc) -> {typedText += " "; return typedText},
    new KeyButton("Del") -> {typedText = /$AlphaKeyboardWidget$this.typedText.slice(0, -1)$/; return typedText}
  ]

  <|
    <out: rows[0];>
    <size: 10;>
    <out: rows[1];>
    <size: 10;>
    <out: rows[2];>
    <size: 10;>
    <out: rows[3];>
    <size: 10;>
    <out: lastRow; align: 50%;>
  >
}

void SpinnerWidget() {
  float angle = 0
  int numCircles = 7
  bool stopped = false

  void Circle(int index) {
    < rotation: (angle + index) * 2 * 3.14159265 / numCircles
      <out: oval; size: 15; align: [100%, 50%];>
    >
  }

  Circle *[]circles = index::numCircles new Circle(index)
  Sprite *sprite = new Sprite()

  while (!stopped)
    angle = sprite.Animate() / 2000 * 2 * 3.14159265

  <size: 100; align: 50%
    <out: circles[0];>
    <out: circles[1];>
    <out: circles[2];>
    <out: circles[3];>
    <out: circles[4];>
    <out: circles[5];>
    <out: circles[6];>
  >
}

String getTimestamp() {
/$const date = new Date()$/
  int minutes = /$date.getMinutes()$/
  return (/$date.getHours()$/ as String) + ":" + (minutes < 10 ? "0" : "") + (minutes as String)
}

String formatMoney(float amount) {
  int dollars = /$Math.trunc(amount)$/
  int cents = /$Math.round((amount - dollars) * 100)$/

  return "$" + dollars + "." + (cents < 10 ? "0" : "") + cents
}

// Real app code begins here

int NumTacosWidget() {
  int NumButton(int num) {
    void showTacos(int x, int y, int width, int height) {displayTacos(x, y, width, height, num);}
    var button = new RectButton((void L() {
      <|
        <size: 15;>
        <
          <size: [175, 70]; align: 50%;
            <out: showTacos; size: 70; align: 50%; color: 0xd0d6ca; pos: [0, -20];>
          >
          <out: "" + num; fontSize:100; align: 50%; color: COLOR_WHITE;>
        >
        <size: 15;>
      >
    })) -> return num

    <out: button;>
  }

  NumButton*[] numTacosButtonArray = index :_ 4 new NumButton(index + 1) -> return /$_ret._ret$/

  <| align: [50%, 0]
    <size: 50;>
    <out: "How many tacos do you want?"; align: 50%;>
    <size: 50;>
    <out: numTacosButtonArray; spacing: 15; radius: 15; fontSize: 15; color: 0xb1bba8;>
  >
}

String RoomNumberWidget() {
  String phoneNumber = ""
  NumericKeyboardWidget *numericKeyboard = new NumericKeyboardWidget() -> (phoneNumber = _ret)
  var nextButton = new LargerButton("Next") -> return phoneNumber

  <|
    <size: 25;>
    <_
      <size: [400, 300]; expand: 100%
        <| align: [50%, 0%]; expand: 100%
          <out: "Type your room number"; align: 50%;>
          <out: roundRect; size: [300, 40]; color: 0xddd1e7; radius: 20; align: 0%
            <out: phoneNumber; fontSize: 30; color: 0x58535c; align: 50%;>
          >
        >
      >
      <size: [400, 300]; expand: 100%
        <out: numericKeyboard; fontSize: 40; spacing: 10; radius: 20; color: 0xAB8EC4; align: 0%; expand: 100%;>
      >
    >
  >
  <out: nextButton; fontSize: 25; color: 0x98c694; align: 100%; pos: -25;>
}

String GuestNameWidget() {
  String zipCode = ""
  AlphaKeyboardWidget *alphaKeyboard = new AlphaKeyboardWidget() -> (zipCode = _ret)
  var nextButton = new LargerButton("Next") -> return zipCode

  <|
    <size: 25;>
    <out: roundRect; size: [400, 40]; color: 0xb4cffa; radius: 20; align: 50%;
      <out: /$GuestNameWidget$this.zipCode.length$/ ? zipCode : "Enter the family guest name"; fontSize: 30; color: 0x7D90AF; align: 50%;>
    >
    <size: 25;>
    <out: alphaKeyboard; fontSize: 30; spacing: 10; radius: 6; color: 0x7d90af;>
  >
  <out: nextButton; fontSize: 25; color: 0x98c694; align: 100%; pos: -25;>
}

Yield *[] exitHandler = []
var Widget() {<out: "";>}
var emptyWidget = new Widget();

void TransactionEntry() {
  // User identification and selections
  int numTacos = 0
  float tacoPrice = 3.05
  String guestName = ""
  String roomNumber = ""

  String getPrice() {return formatMoney(tacoPrice)}
  String getTotal() {return formatMoney(numTacos * tacoPrice)}
}

void SummaryWidget(TransactionEntry *entry) {
  var nextButton = new LargerButton("Confirm") -> return

  <_ align: 50%; fontSize: 30; color: COLOR_WHITE
    <
      <out: rect; expand: 100%; color: 0x97726f;>
      <|
        <out: "Guest: ";>
        <out: "Room: ";>
        <out: "Number of tacos: ";>
        <out: "Taco price: " ;>
        <out: "Total Price: ";>
      >
    >
    <
      <out: rect; expand: 100%; color: 0xac837f;>
      <|
        <out: entry.guestName; align: 100%;>
        <out: entry.roomNumber; align: 100%;>
        <out: entry.numTacos; align: 100%;>
        <out: entry.getPrice(); align: 100%;>
        <out: entry.getTotal(); align: 100%;>
      >
    >
  >
  <out: nextButton; fontSize: 25; color: 0x98c694; align: 100%; pos: [-25, -25];>
}

bool GetTransactionEntry(TransactionEntry *entry) {
  int oldIndex = 0
  int paneIndex = 0
  int maxIndex = paneIndex;
  int[] bounds = [0, 0, 0, 0]
  Yield *triggerExit = new Yield() -> {exitHandler--; return false}

  exitHandler[0] = triggerExit;

  void Pane(String title, Widget *widget) {
    <size: [800, 400]; expand: [0, 100%];>
    <out: widget; expand: 100%; onPress: 0; onRelease: 0;>
  }

  Pane *[] panes = [
    new Pane("Count", (new NumTacosWidget() -> {entry.numTacos = _ret; NextPane()})),
    new Pane("Room", (new RoomNumberWidget() -> {entry.roomNumber = _ret; NextPane()})),
    new Pane("Guest", (new GuestNameWidget() -> {entry.guestName = _ret; NextPane()})),
    new Pane("Summary", (new SummaryWidget(entry) -> {exitHandler--; return true}))
  ]
  void TabLabel(int pane) {
    var text = "    " + (pane + 1) + "." + panes[pane].title + "    "
    var button = new GenericButton((void L_(bool[] pressed) {
      <out: text; opacity: pane > maxIndex ? 50% : pressed[0] ? 35% : 100%;>
    })) -> {if (pane <= maxIndex) return}

    <out: button;>
  }

  TabLabel*[] titles = pane:_ panes.size() (new TabLabel(pane)) -> SetPane(/$_ret.index$/ as int)

  Timer(1)   // trigger refresh for slider to get the right bounds
  SetPane(0) // initialize pane with well-dimensioned slider

  void NextPane() {
  /$const NextPane$this = this$/
    SetPane(paneIndex + 1)
    return;
  }

  // switch to new pane using animation on both sliders and panes
  void SetPane(int index) {
    bounds = getBounds(["application", "titles"], [index])
    paneIndex = index
    maxIndex = max(maxIndex, paneIndex)
    return
  }

  // Transaction UI
  <out:displaySlider; pos:[bounds[0], -1]; size:[bounds[2], bounds[3] + 1]; color:0xbeb8b0; align:0;>
  <|
    <_ out: titles; expand:[100%, 0]; color: 0x77736e; fontSize:20; tag:"titles";>
    <out: panes[paneIndex]; expand: 100%;>
  >
}

bool OrderTacos(TransactionEntry *transactionEntry) {
  SpinnerWidget *spinner = new SpinnerWidget()

  Timer(5000) // fake time for the transaction to complete
  spinner.stopped = true
  return true

  <| color: COLOR_BLACK; opacity: 60%; align: 50%
    <out: spinner; align: 50%;>
    <size: 25;>
    <out: "Ordering tacos... please wait."; align: 50%;>
  >
}

void DisplaySuccess(String total) {
  Timer(5000)
  return

  <| color: COLOR_BLACK; opacity: 60%; align: 50%
    <out: "A total of " + total + " has been added to your hotel invoice."; align: 50%;>
    <size: 25;>
    <out: "Thank you for choosing the Taco Hotel for your stay."; align: 50%;>
  >
}

int MainScreen() {
  var buyTacosButton = new ObjectOverTextButton(showTwoTacos, "Order tacos!!") -> return 1
  var roomServiceButton = new ObjectBeforeTextButton(displaySlider, "Room service") -> return 2
  var moreTowelsButton = new ObjectBeforeTextButton(displaySlider, "Late checkout") -> return 3

  <\ color: 0x7cb0c7
    < size: 15;>
    <_  expand: 100%; radius: 10
      <| fontSize:20; expand: 100%;
        < out: roomServiceButton; expand: 100%;>
        < size: 15;>
        < out: moreTowelsButton; expand: 100%;>
      >
      < size: 15;>
      < out: buyTacosButton; fontSize:30; expand: 100%;>
    >
    < size: 15;>
  >
}

void Application() {
  while (true) {
    int choice = MainScreen()

    // gotta implement the switch/case statement...
    if (choice == 1) {
      TransactionEntry *entry = new TransactionEntry()

      if (GetTransactionEntry(entry)) {
        if (OrderTacos(entry))
          DisplaySuccess(entry.getTotal())
        else {
//          DisplayError()
        }
      }
    }
    else
      if (choice == 2) {
      }
      else {
      }
  }

  <out: ""; expand: 100%; onPress: 0; onRelease: 0;>
}

TextButton *exit = new TextButton("Exit") -> process(exitHandler[0])
var application = new Application()

<|
  <out:rect; size:[800, 60]; color: 0xbeb8b0; align: 0
    <out:getTimestamp(); fontSize:30; color:0x77736e; align: [5%, 50%];>
    <out:"Taco Hotel"; fontSize:35; color: 0x77736e; align: 50%; expand: [0, 50%];>
    <out:exitHandler.size() ? exit : emptyWidget; color: 0x973543; align: [95%, 50%]; expand: [0, 50%];>
  >
  <
    <out:rect; size:[800, 420]; color:0xeee6dd;>
    <out:application; tag:"application"; expand: 100%; color: 0x5f5c58;>
  >
>
